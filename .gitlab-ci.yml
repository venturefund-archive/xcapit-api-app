---
include:
  - template: Code-Quality.gitlab-ci.yml

stages:
  - syntax
  - test
  - security-scanning
  - build
  - docker-lint
  - release
  - post-test

image: docker:19.03.1
services:
  - docker:19.03.1-dind
    
variables:
  HADOLINT_REPO: hadolint/hadolint
  HADOLINT_TAG: v2.0.0-alpine
  API_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  CONTAINER_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  PYTHON_VERSION: "${PYTHON_VERSION}"
  SRC_DIR: "."
  NODE_VERSION: '14'

cache:
  untracked: true
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ~/.cache/pip/

###########################################################################
### Syntax check
.syntax-check: &syntax-check
  stage: syntax
  image: python:${PYTHON_VERSION}
  cache:
    untracked: true
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ~/.cache/pip/
  before_script:
    - python -V
    - pip install -r requirements.txt
    - cd ${SRC_DIR}
  script:
    - python -m py_compile *.py

### Django pytest
.django-pytest: &django-pytest
  stage: test
  image: python:${PYTHON_VERSION}
  services:
    - name: postgres:12.0
      alias: postgres
  before_script:
    - python -V
    - pip install -r requirements.txt
    - cd ${SRC_DIR}
  script:
    - pytest --junitxml=$CI_PROJECT_DIR/report.xml
    - coverage run -m pytest
    - coverage report -m
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/report.xml
  needs: 
    - syntax_checking

### Docker lint
.docker-lint: &docker-lint
  stage: syntax
  image: '${HADOLINT_REPO}:${HADOLINT_TAG}'
  before_script:
    - hadolint --version
    - cd ${SRC_DIR}
  script:
    - hadolint --ignore DL3018 --ignore DL3006 --ignore DL3003 --ignore DL3013 --ignore DL3007 --ignore DL3002 --ignore DL3008 --ignore DL3042 --ignore DL3016 Dockerfile

### Semantic release
.semantic-release: &semantic-release
  stage: release
  image: node:${NODE_VERSION}
  before_script:
    - npm install @semantic-release/gitlab @semantic-release/changelog @semantic-release/release-notes-generator @semantic-release/git -D
    - npm cache clean --force
    - npm cache verify

###########################################################################
### Code quality
docker_lint:
  <<: *docker-lint
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'

code_quality:
  stage: test
  artifacts:
    paths: [gl-code-quality-report.json]
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'

### Syntax check
syntax_checking:
  <<: *syntax-check
  rules:
    - if: $CI_MERGE_REQUEST_IID

### pytest
tests:
  <<: *django-pytest
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'

# # Release
release_master:
  <<: *semantic-release
  only:
    refs:
      - master
  script:
    - npx semantic-release -p "@semantic-release/commit-analyzer" "@semantic-release/changelog" "@semantic-release/git"

release_develop:
  <<: *semantic-release
  only:
    refs:
      - develop
  script:
    - npx semantic-release --tag-format ${CI_COMMIT_BRANCH}-\${version} -p "@semantic-release/commit-analyzer" "@semantic-release/changelog" "@semantic-release/git"

cleanup_job:
  stage: .post
  script:
    - echo "Cleaning up"
    - rm -rf "%CACHE_PATH%/%CI_PIPELINE_ID%"
  when: on_failure
